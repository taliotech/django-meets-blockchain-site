{"version":3,"sources":["webpack:///path---part-1-instructions-cd59fe732a91c4bec585.js","webpack:///./.cache/json/part-1-instructions.json"],"names":["webpackJsonp","312","module","exports","data","site","siteMetadata","title","sidebarTitle","sidebarSubtext","siteLastUpdated","version","siteUrl","keywords","author","name","url","email","socials","imgpath","sectionList","edges","node","items","id","slug","markdownRemark","html","tableOfContents","excerpt","frontmatter","prev","next","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,0BAAAC,aAAA,0BAAAC,eAAA,0BAAAC,gBAAA,2BAAAC,QAAA,MAAAC,QAAA,2DAAAC,SAAA,0BAAAC,QAAuSC,KAAA,WAAAC,IAAA,mBAAAC,MAAA,iBAAmEC,UAAaH,KAAA,UAAAI,QAAA,mBAAAH,IAAA,SAA6DD,KAAA,SAAAI,QAAA,kBAAAH,IAAA,8DAAgHD,KAAA,WAAAI,QAAA,oBAAAH,IAAA,SAA+DD,KAAA,SAAAI,QAAA,kBAAAH,IAAA,WAA4DI,aAAgBC,QAAUC,MAAQf,MAAA,kBAAAgB,QAAoCC,GAAA,eAAAC,KAAA,iCAAAlB,MAAA,iBAAqFiB,GAAA,gBAAAC,KAAA,kCAAAlB,MAAA,qBAA2Fe,MAAQf,MAAA,uBAAAgB,QAAyCC,GAAA,eAAAC,KAAA,oBAAAlB,MAAA,aAAoEiB,GAAA,mBAAAC,KAAA,wBAAAlB,MAAA,oBAAmFe,MAAQf,MAAA,qBAAAgB,QAAuCC,GAAA,sBAAAC,KAAA,oBAAAlB,MAAA,aAA2EiB,GAAA,0BAAAC,KAAA,wBAAAlB,MAAA,qBAA0FmB,gBAAmBC,KAAA,kzlBAA2+RC,gBAAA,u4BAAAC,QAAA,+IAAAC,aAAy9WN,GAAA,mBAAAjB,MAAA,eAAAwB,KAAA,eAAAC,KAAA,QAAmFC,aAAgBR,KAAA","file":"path---part-1-instructions-cd59fe732a91c4bec585.js","sourcesContent":["webpackJsonp([168392498811549],{\n\n/***/ 312:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Django Meets Blockchain\",\"sidebarTitle\":\"Django Meets Blockchain\",\"sidebarSubtext\":\"Django Meets Blockchain\",\"siteLastUpdated\":\"2018-11-29T20:38:54.133Z\",\"version\":\"1.0\",\"siteUrl\":\"https://taliotech.github.io/django-meets-blockchain-site\",\"keywords\":\"talio,blockchain,django\",\"author\":{\"name\":\"Talio.io\",\"url\":\"https://talio.ai\",\"email\":\"info@talio.io\"},\"socials\":[{\"name\":\"Twitter\",\"imgpath\":\"icon-twitter.svg\",\"url\":\"TODO\"},{\"name\":\"GitHub\",\"imgpath\":\"icon-github.svg\",\"url\":\"https://github.com/taliotech/django-meets-blockchain-site\"},{\"name\":\"LinkedIn\",\"imgpath\":\"icon-linkedin.svg\",\"url\":\"TODO\"},{\"name\":\"Medium\",\"imgpath\":\"icon-medium.svg\",\"url\":\"TODO\"}]}},\"sectionList\":{\"edges\":[{\"node\":{\"title\":\"Getting Started\",\"items\":[{\"id\":\"introduction\",\"slug\":\"/getting-started/introduction/\",\"title\":\"Introduction\"},{\"id\":\"prerequisites\",\"slug\":\"/getting-started/prerequisites/\",\"title\":\"Prerequisites\"}]}},{\"node\":{\"title\":\"Part 1: Fundamentals\",\"items\":[{\"id\":\"drf-overview\",\"slug\":\"/part-1/overview/\",\"title\":\"Overview\"},{\"id\":\"drf-instructions\",\"slug\":\"/part-1/instructions/\",\"title\":\"Instructions\"}]}},{\"node\":{\"title\":\"Part 2: Blockchain\",\"items\":[{\"id\":\"blockchain-overview\",\"slug\":\"/part-2/overview/\",\"title\":\"Overview\"},{\"id\":\"blockchain-instructions\",\"slug\":\"/part-2/instructions/\",\"title\":\"Instructions\"}]}}]},\"markdownRemark\":{\"html\":\"<h3 id=\\\"objectives\\\"><a href=\\\"#objectives\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Objectives</h3>\\n<ul>\\n<li>Provision and setup a new project using Django Rest Framework (DRF)</li>\\n<li>Add a <code class=\\\"language-text\\\">/wallets</code> endpoint to support persisting wallet data by adding a DRF Model, Serializer, and ViewSet</li>\\n<li>Run and test endpoint</li>\\n</ul>\\n<h3 id=\\\"setup\\\"><a href=\\\"#setup\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Setup</h3>\\n<p>Begin by forking the following repository, which contains some assets to get you started:</p>\\n<blockquote>\\n<p><a href=\\\"https://github.com/taliotech/django-meets-blockchain\\\">https://github.com/taliotech/django-meets-blockchain</a></p>\\n</blockquote>\\n<p>Next, clone your fork of the repository locally and navigate to the clone folder in a terminal window. You should be able to run <code class=\\\"language-text\\\">git status</code> from the folder to confirm your clone is setup correctly.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">git clone https://github.com/YOURUSERNAME/django-meets-blockchain.git\\ncd django-meets-blockchain\\ngit status</code></pre>\\n      </div>\\n<p>Next, you’ll need to launch the Vagrant virtual development environment:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">vagrant up</code></pre>\\n      </div>\\n<p>This command will take several minutes to complete, as Vagrant will download the base image for the virtual machine (Ubuntu 16.04) and configure it for development by installing Node, Python, and Django. A Postres database instance is also installed and configured to support the persistence layer. By developing within a VM, we can not only spin up a self-contained environment with all the required middleware, but we can also ensure more consistent, platform-agnostic results. Subsequent runs of <code class=\\\"language-text\\\">vagrant up</code> will complete much faster.</p>\\n<p>Once the VM is up and running, SSH into the VM:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">vagrant ssh</code></pre>\\n      </div>\\n<p>The command prompt should change, indicating you’re interacting with the CLI of the VM and not your host machine.</p>\\n<h3 id=\\\"scaffolding\\\"><a href=\\\"#scaffolding\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Scaffolding</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\"># Set up a new project with a single application\\ndjango-admin startproject dmbapi .  # Note the trailing &#39;.&#39; character\\ndjango-admin startapp core\\ncd ..</code></pre>\\n      </div>\\n<p>The project layout should look like:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">$ pwd\\n&lt;some path&gt;/django-meets-blockchain\\n$ find .\\n.\\n./manage.py\\n./django-meets-blockchain\\n./django-meets-blockchain/core\\n./django-meets-blockchain/core/__init__.py\\n./django-meets-blockchain/core/admin.py\\n./django-meets-blockchain/core/apps.py\\n./django-meets-blockchain/core/migrations\\n./django-meets-blockchain/core/migrations/__init__.py\\n./django-meets-blockchain/core/models.py\\n./django-meets-blockchain/core/tests.py\\n./django-meets-blockchain/core/views.py\\n./django-meets-blockchain/dmbapi/__init__.py\\n./django-meets-blockchain/dmbapi/settings.py\\n./django-meets-blockchain/dmbapi/urls.py\\n./django-meets-blockchain/dmbapi/wsgi.py</code></pre>\\n      </div>\\n<p>It may look unusual that the application <code class=\\\"language-text\\\">core</code> has been created as a subfolder within the project directory. Using the project’s namespace avoids name clashes with external modules.</p>\\n<p>Now sync your database for the first time:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">python manage.py migrate</code></pre>\\n      </div>\\n<p>You’ll also need to create an initial user named <code class=\\\"language-text\\\">admin</code> with a password of your choice. Note this password as you’ll need to authenticate as that user later.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">python manage.py createsuperuser --email admin@example.com --username admin</code></pre>\\n      </div>\\n<p>Once you’ve set up a database and the initial user is created and ready to go, open up the app’s directory in a text editor to get coding!</p>\\n<h3 id=\\\"adding-an-endpoint\\\"><a href=\\\"#adding-an-endpoint\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Adding an Endpoint</h3>\\n<p>To create the <code class=\\\"language-text\\\">/wallets</code> endpoint, you’ll need to code three main elements:</p>\\n<ul>\\n<li>The <strong>Model</strong> that defines the <code class=\\\"language-text\\\">Wallet</code> data structure</li>\\n<li>The <strong>Serializer</strong> that reads and writes the model from and to its persistent state</li>\\n<li>The <strong>ViewSet</strong> that controls how records are queried from the data store</li>\\n</ul>\\n<h4 id=\\\"model\\\"><a href=\\\"#model\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Model</h4>\\n<p>First, declare the model for <code class=\\\"language-text\\\">Wallet</code>. Nominally, you’ll want to store two basic fields: the <code class=\\\"language-text\\\">address</code> and a descriptive <code class=\\\"language-text\\\">label</code>.  In <code class=\\\"language-text\\\">django-meets-blockchain/core/models.py</code>, do this by adding the following code:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Wallet</span><span class=\\\"token punctuation\\\">(</span>models<span class=\\\"token punctuation\\\">.</span>Model<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    label <span class=\\\"token operator\\\">=</span> models<span class=\\\"token punctuation\\\">.</span>CharField<span class=\\\"token punctuation\\\">(</span>max_length<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">255</span><span class=\\\"token punctuation\\\">)</span>\\n    address <span class=\\\"token operator\\\">=</span> models<span class=\\\"token punctuation\\\">.</span>CharField<span class=\\\"token punctuation\\\">(</span>max_length<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">255</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__str__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">return</span> u<span class=\\\"token string\\\">'{} ({})'</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">format</span><span class=\\\"token punctuation\\\">(</span>\\n            self<span class=\\\"token punctuation\\\">.</span>label<span class=\\\"token punctuation\\\">,</span>\\n            self<span class=\\\"token punctuation\\\">.</span>address\\n        <span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<h4 id=\\\"serializer\\\"><a href=\\\"#serializer\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Serializer</h4>\\n<p>Next, add the serializer for <code class=\\\"language-text\\\">Wallet</code>. Create a new file called <code class=\\\"language-text\\\">django-meets-blockchain/core/serializers.py</code> and add the following code:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">from</span> <span class=\\\"token punctuation\\\">.</span>models <span class=\\\"token keyword\\\">import</span> Wallet\\n<span class=\\\"token keyword\\\">from</span> rest_framework <span class=\\\"token keyword\\\">import</span> serializers\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">WalletSerializer</span><span class=\\\"token punctuation\\\">(</span>serializers<span class=\\\"token punctuation\\\">.</span>HyperlinkedModelSerializer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Meta</span><span class=\\\"token punctuation\\\">:</span>\\n        model <span class=\\\"token operator\\\">=</span> Wallet\\n        fields <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'label'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'address'</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Notice the field list includes the implicit <code class=\\\"language-text\\\">id</code> in addition to the two declared fields, <code class=\\\"language-text\\\">address</code> and <code class=\\\"language-text\\\">label</code>. Notice also that we’re enabling hyperlinked relations in this case with <code class=\\\"language-text\\\">HyperlinkedModelSerializer</code>. You could also use primary key and various other relationships, but hyperlinking is good RESTful design.</p>\\n<h4 id=\\\"viewset\\\"><a href=\\\"#viewset\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ViewSet</h4>\\n<p>Next, add the viewset declaration in <code class=\\\"language-text\\\">django-meets-blockchain/core/views.py</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">from</span> <span class=\\\"token punctuation\\\">.</span>models <span class=\\\"token keyword\\\">import</span> Wallet\\n<span class=\\\"token keyword\\\">from</span> <span class=\\\"token punctuation\\\">.</span>serializers <span class=\\\"token keyword\\\">import</span> WalletSerializer\\n<span class=\\\"token keyword\\\">from</span> rest_framework <span class=\\\"token keyword\\\">import</span> viewsets\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">WalletViewSet</span><span class=\\\"token punctuation\\\">(</span>viewsets<span class=\\\"token punctuation\\\">.</span>ModelViewSet<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n    API endpoint that allows wallets to be viewed or edited.\\n    \\\"\\\"\\\"</span>\\n    queryset <span class=\\\"token operator\\\">=</span> Wallet<span class=\\\"token punctuation\\\">.</span>objects<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">all</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>order_by<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">)</span>\\n    serializer_class <span class=\\\"token operator\\\">=</span> WalletSerializer</code></pre>\\n      </div>\\n<p>Note this is a very simple query that returns all <code class=\\\"language-text\\\">Wallet</code> records, ordered by <code class=\\\"language-text\\\">id</code>.</p>\\n<h4 id=\\\"wiring\\\"><a href=\\\"#wiring\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Wiring</h4>\\n<p>Finally, you’ll need to configure the URL for the new endpoint and add the app into the project’s settings.</p>\\n<p>In <code class=\\\"language-text\\\">django-meets-blockchain/dmbapi/urls.py</code>, replace the code with the following:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">from</span> django<span class=\\\"token punctuation\\\">.</span>conf<span class=\\\"token punctuation\\\">.</span>urls <span class=\\\"token keyword\\\">import</span> url<span class=\\\"token punctuation\\\">,</span> include\\n<span class=\\\"token keyword\\\">from</span> rest_framework <span class=\\\"token keyword\\\">import</span> routers\\n<span class=\\\"token keyword\\\">from</span> core <span class=\\\"token keyword\\\">import</span> views <span class=\\\"token keyword\\\">as</span> core_views\\n\\nrouter <span class=\\\"token operator\\\">=</span> routers<span class=\\\"token punctuation\\\">.</span>DefaultRouter<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nrouter<span class=\\\"token punctuation\\\">.</span>register<span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token string\\\">'wallets'</span><span class=\\\"token punctuation\\\">,</span> core_views<span class=\\\"token punctuation\\\">.</span>WalletViewSet<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\"># Wire up our API using automatic URL routing.</span>\\n<span class=\\\"token comment\\\"># Additionally, we include login URLs for the browsable API.</span>\\nurlpatterns <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    url<span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token string\\\">'^'</span><span class=\\\"token punctuation\\\">,</span> include<span class=\\\"token punctuation\\\">(</span>router<span class=\\\"token punctuation\\\">.</span>urls<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    url<span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token string\\\">'^api-auth/'</span><span class=\\\"token punctuation\\\">,</span> include<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'rest_framework.urls'</span><span class=\\\"token punctuation\\\">,</span> namespace<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'rest_framework'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>In <code class=\\\"language-text\\\">django-meets-blockchain/dmbapi/settings.py</code>, add entries for <code class=\\\"language-text\\\">rest_framework</code> and <code class=\\\"language-text\\\">core</code> to <code class=\\\"language-text\\\">INSTALLED_APPS</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\">INSTALLED_APPS = <span class=\\\"token punctuation\\\">[</span>\\n    'django.contrib.admin'<span class=\\\"token punctuation\\\">,</span>\\n    'django.contrib.auth'<span class=\\\"token punctuation\\\">,</span>\\n    'django.contrib.contenttypes'<span class=\\\"token punctuation\\\">,</span>\\n    'django.contrib.sessions'<span class=\\\"token punctuation\\\">,</span>\\n    'django.contrib.messages'<span class=\\\"token punctuation\\\">,</span>\\n    'django.contrib.staticfiles'<span class=\\\"token punctuation\\\">,</span>\\n    'rest_framework'<span class=\\\"token punctuation\\\">,</span>\\n    'core'\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<h4 id=\\\"run-the-server\\\"><a href=\\\"#run-the-server\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Run the Server</h4>\\n<p>Test the app now by running the server (note this command should be executed <em>inside</em> the VM):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">python manage.py runserver 0.0.0.0:8000</code></pre>\\n      </div>\\n<p>Now you should be able to access the new endpoint at <a href=\\\"http://localhost:8000/wallets/\\\">http://localhost:8000/wallets/</a></p>\\n<p>Try adding a new wallet using the form, then reload the endpoint to make sure it was added. You can verify the data is correct by looking at the JSON output as well: <a href=\\\"http://localhost:8000/wallets/?format=json\\\">http://localhost:8000/wallets/?format=json</a></p>\",\"tableOfContents\":\"<ul>\\n<li><a href=\\\"/django-meets-blockchain-site/part-1/instructions/#objectives\\\">Objectives</a></li>\\n<li><a href=\\\"/django-meets-blockchain-site/part-1/instructions/#setup\\\">Setup</a></li>\\n<li><a href=\\\"/django-meets-blockchain-site/part-1/instructions/#scaffolding\\\">Scaffolding</a></li>\\n<li>\\n<p><a href=\\\"/django-meets-blockchain-site/part-1/instructions/#adding-an-endpoint\\\">Adding an Endpoint</a></p>\\n<ul>\\n<li><a href=\\\"/django-meets-blockchain-site/part-1/instructions/#model\\\">Model</a></li>\\n<li><a href=\\\"/django-meets-blockchain-site/part-1/instructions/#serializer\\\">Serializer</a></li>\\n<li><a href=\\\"/django-meets-blockchain-site/part-1/instructions/#viewset\\\">ViewSet</a></li>\\n<li><a href=\\\"/django-meets-blockchain-site/part-1/instructions/#wiring\\\">Wiring</a></li>\\n<li><a href=\\\"/django-meets-blockchain-site/part-1/instructions/#run-the-server\\\">Run the Server</a></li>\\n</ul>\\n</li>\\n</ul>\",\"excerpt\":\"Objectives Provision and setup a new project using Django Rest Framework (DRF) Add a   endpoint to support persisting wallet data by adding…\",\"frontmatter\":{\"id\":\"drf-instructions\",\"title\":\"Instructions\",\"prev\":\"drf-overview\",\"next\":null}}},\"pathContext\":{\"slug\":\"/part-1/instructions/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---part-1-instructions-cd59fe732a91c4bec585.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Django Meets Blockchain\",\"sidebarTitle\":\"Django Meets Blockchain\",\"sidebarSubtext\":\"Django Meets Blockchain\",\"siteLastUpdated\":\"2018-11-29T20:38:54.133Z\",\"version\":\"1.0\",\"siteUrl\":\"https://taliotech.github.io/django-meets-blockchain-site\",\"keywords\":\"talio,blockchain,django\",\"author\":{\"name\":\"Talio.io\",\"url\":\"https://talio.ai\",\"email\":\"info@talio.io\"},\"socials\":[{\"name\":\"Twitter\",\"imgpath\":\"icon-twitter.svg\",\"url\":\"TODO\"},{\"name\":\"GitHub\",\"imgpath\":\"icon-github.svg\",\"url\":\"https://github.com/taliotech/django-meets-blockchain-site\"},{\"name\":\"LinkedIn\",\"imgpath\":\"icon-linkedin.svg\",\"url\":\"TODO\"},{\"name\":\"Medium\",\"imgpath\":\"icon-medium.svg\",\"url\":\"TODO\"}]}},\"sectionList\":{\"edges\":[{\"node\":{\"title\":\"Getting Started\",\"items\":[{\"id\":\"introduction\",\"slug\":\"/getting-started/introduction/\",\"title\":\"Introduction\"},{\"id\":\"prerequisites\",\"slug\":\"/getting-started/prerequisites/\",\"title\":\"Prerequisites\"}]}},{\"node\":{\"title\":\"Part 1: Fundamentals\",\"items\":[{\"id\":\"drf-overview\",\"slug\":\"/part-1/overview/\",\"title\":\"Overview\"},{\"id\":\"drf-instructions\",\"slug\":\"/part-1/instructions/\",\"title\":\"Instructions\"}]}},{\"node\":{\"title\":\"Part 2: Blockchain\",\"items\":[{\"id\":\"blockchain-overview\",\"slug\":\"/part-2/overview/\",\"title\":\"Overview\"},{\"id\":\"blockchain-instructions\",\"slug\":\"/part-2/instructions/\",\"title\":\"Instructions\"}]}}]},\"markdownRemark\":{\"html\":\"<h3 id=\\\"objectives\\\"><a href=\\\"#objectives\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Objectives</h3>\\n<ul>\\n<li>Provision and setup a new project using Django Rest Framework (DRF)</li>\\n<li>Add a <code class=\\\"language-text\\\">/wallets</code> endpoint to support persisting wallet data by adding a DRF Model, Serializer, and ViewSet</li>\\n<li>Run and test endpoint</li>\\n</ul>\\n<h3 id=\\\"setup\\\"><a href=\\\"#setup\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Setup</h3>\\n<p>Begin by forking the following repository, which contains some assets to get you started:</p>\\n<blockquote>\\n<p><a href=\\\"https://github.com/taliotech/django-meets-blockchain\\\">https://github.com/taliotech/django-meets-blockchain</a></p>\\n</blockquote>\\n<p>Next, clone your fork of the repository locally and navigate to the clone folder in a terminal window. You should be able to run <code class=\\\"language-text\\\">git status</code> from the folder to confirm your clone is setup correctly.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">git clone https://github.com/YOURUSERNAME/django-meets-blockchain.git\\ncd django-meets-blockchain\\ngit status</code></pre>\\n      </div>\\n<p>Next, you’ll need to launch the Vagrant virtual development environment:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">vagrant up</code></pre>\\n      </div>\\n<p>This command will take several minutes to complete, as Vagrant will download the base image for the virtual machine (Ubuntu 16.04) and configure it for development by installing Node, Python, and Django. A Postres database instance is also installed and configured to support the persistence layer. By developing within a VM, we can not only spin up a self-contained environment with all the required middleware, but we can also ensure more consistent, platform-agnostic results. Subsequent runs of <code class=\\\"language-text\\\">vagrant up</code> will complete much faster.</p>\\n<p>Once the VM is up and running, SSH into the VM:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">vagrant ssh</code></pre>\\n      </div>\\n<p>The command prompt should change, indicating you’re interacting with the CLI of the VM and not your host machine.</p>\\n<h3 id=\\\"scaffolding\\\"><a href=\\\"#scaffolding\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Scaffolding</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\"># Set up a new project with a single application\\ndjango-admin startproject dmbapi .  # Note the trailing &#39;.&#39; character\\ndjango-admin startapp core\\ncd ..</code></pre>\\n      </div>\\n<p>The project layout should look like:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">$ pwd\\n&lt;some path&gt;/django-meets-blockchain\\n$ find .\\n.\\n./manage.py\\n./django-meets-blockchain\\n./django-meets-blockchain/core\\n./django-meets-blockchain/core/__init__.py\\n./django-meets-blockchain/core/admin.py\\n./django-meets-blockchain/core/apps.py\\n./django-meets-blockchain/core/migrations\\n./django-meets-blockchain/core/migrations/__init__.py\\n./django-meets-blockchain/core/models.py\\n./django-meets-blockchain/core/tests.py\\n./django-meets-blockchain/core/views.py\\n./django-meets-blockchain/dmbapi/__init__.py\\n./django-meets-blockchain/dmbapi/settings.py\\n./django-meets-blockchain/dmbapi/urls.py\\n./django-meets-blockchain/dmbapi/wsgi.py</code></pre>\\n      </div>\\n<p>It may look unusual that the application <code class=\\\"language-text\\\">core</code> has been created as a subfolder within the project directory. Using the project’s namespace avoids name clashes with external modules.</p>\\n<p>Now sync your database for the first time:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">python manage.py migrate</code></pre>\\n      </div>\\n<p>You’ll also need to create an initial user named <code class=\\\"language-text\\\">admin</code> with a password of your choice. Note this password as you’ll need to authenticate as that user later.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">python manage.py createsuperuser --email admin@example.com --username admin</code></pre>\\n      </div>\\n<p>Once you’ve set up a database and the initial user is created and ready to go, open up the app’s directory in a text editor to get coding!</p>\\n<h3 id=\\\"adding-an-endpoint\\\"><a href=\\\"#adding-an-endpoint\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Adding an Endpoint</h3>\\n<p>To create the <code class=\\\"language-text\\\">/wallets</code> endpoint, you’ll need to code three main elements:</p>\\n<ul>\\n<li>The <strong>Model</strong> that defines the <code class=\\\"language-text\\\">Wallet</code> data structure</li>\\n<li>The <strong>Serializer</strong> that reads and writes the model from and to its persistent state</li>\\n<li>The <strong>ViewSet</strong> that controls how records are queried from the data store</li>\\n</ul>\\n<h4 id=\\\"model\\\"><a href=\\\"#model\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Model</h4>\\n<p>First, declare the model for <code class=\\\"language-text\\\">Wallet</code>. Nominally, you’ll want to store two basic fields: the <code class=\\\"language-text\\\">address</code> and a descriptive <code class=\\\"language-text\\\">label</code>.  In <code class=\\\"language-text\\\">django-meets-blockchain/core/models.py</code>, do this by adding the following code:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Wallet</span><span class=\\\"token punctuation\\\">(</span>models<span class=\\\"token punctuation\\\">.</span>Model<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    label <span class=\\\"token operator\\\">=</span> models<span class=\\\"token punctuation\\\">.</span>CharField<span class=\\\"token punctuation\\\">(</span>max_length<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">255</span><span class=\\\"token punctuation\\\">)</span>\\n    address <span class=\\\"token operator\\\">=</span> models<span class=\\\"token punctuation\\\">.</span>CharField<span class=\\\"token punctuation\\\">(</span>max_length<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">255</span><span class=\\\"token punctuation\\\">)</span>\\n\\n    <span class=\\\"token keyword\\\">def</span> <span class=\\\"token function\\\">__str__</span><span class=\\\"token punctuation\\\">(</span>self<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n        <span class=\\\"token keyword\\\">return</span> u<span class=\\\"token string\\\">'{} ({})'</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">format</span><span class=\\\"token punctuation\\\">(</span>\\n            self<span class=\\\"token punctuation\\\">.</span>label<span class=\\\"token punctuation\\\">,</span>\\n            self<span class=\\\"token punctuation\\\">.</span>address\\n        <span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<h4 id=\\\"serializer\\\"><a href=\\\"#serializer\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Serializer</h4>\\n<p>Next, add the serializer for <code class=\\\"language-text\\\">Wallet</code>. Create a new file called <code class=\\\"language-text\\\">django-meets-blockchain/core/serializers.py</code> and add the following code:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">from</span> <span class=\\\"token punctuation\\\">.</span>models <span class=\\\"token keyword\\\">import</span> Wallet\\n<span class=\\\"token keyword\\\">from</span> rest_framework <span class=\\\"token keyword\\\">import</span> serializers\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">WalletSerializer</span><span class=\\\"token punctuation\\\">(</span>serializers<span class=\\\"token punctuation\\\">.</span>HyperlinkedModelSerializer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Meta</span><span class=\\\"token punctuation\\\">:</span>\\n        model <span class=\\\"token operator\\\">=</span> Wallet\\n        fields <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'label'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'address'</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>Notice the field list includes the implicit <code class=\\\"language-text\\\">id</code> in addition to the two declared fields, <code class=\\\"language-text\\\">address</code> and <code class=\\\"language-text\\\">label</code>. Notice also that we’re enabling hyperlinked relations in this case with <code class=\\\"language-text\\\">HyperlinkedModelSerializer</code>. You could also use primary key and various other relationships, but hyperlinking is good RESTful design.</p>\\n<h4 id=\\\"viewset\\\"><a href=\\\"#viewset\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ViewSet</h4>\\n<p>Next, add the viewset declaration in <code class=\\\"language-text\\\">django-meets-blockchain/core/views.py</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">from</span> <span class=\\\"token punctuation\\\">.</span>models <span class=\\\"token keyword\\\">import</span> Wallet\\n<span class=\\\"token keyword\\\">from</span> <span class=\\\"token punctuation\\\">.</span>serializers <span class=\\\"token keyword\\\">import</span> WalletSerializer\\n<span class=\\\"token keyword\\\">from</span> rest_framework <span class=\\\"token keyword\\\">import</span> viewsets\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">WalletViewSet</span><span class=\\\"token punctuation\\\">(</span>viewsets<span class=\\\"token punctuation\\\">.</span>ModelViewSet<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token triple-quoted-string string\\\">\\\"\\\"\\\"\\n    API endpoint that allows wallets to be viewed or edited.\\n    \\\"\\\"\\\"</span>\\n    queryset <span class=\\\"token operator\\\">=</span> Wallet<span class=\\\"token punctuation\\\">.</span>objects<span class=\\\"token punctuation\\\">.</span><span class=\\\"token builtin\\\">all</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>order_by<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">)</span>\\n    serializer_class <span class=\\\"token operator\\\">=</span> WalletSerializer</code></pre>\\n      </div>\\n<p>Note this is a very simple query that returns all <code class=\\\"language-text\\\">Wallet</code> records, ordered by <code class=\\\"language-text\\\">id</code>.</p>\\n<h4 id=\\\"wiring\\\"><a href=\\\"#wiring\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Wiring</h4>\\n<p>Finally, you’ll need to configure the URL for the new endpoint and add the app into the project’s settings.</p>\\n<p>In <code class=\\\"language-text\\\">django-meets-blockchain/dmbapi/urls.py</code>, replace the code with the following:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-python\\\"><code class=\\\"language-python\\\"><span class=\\\"token keyword\\\">from</span> django<span class=\\\"token punctuation\\\">.</span>conf<span class=\\\"token punctuation\\\">.</span>urls <span class=\\\"token keyword\\\">import</span> url<span class=\\\"token punctuation\\\">,</span> include\\n<span class=\\\"token keyword\\\">from</span> rest_framework <span class=\\\"token keyword\\\">import</span> routers\\n<span class=\\\"token keyword\\\">from</span> core <span class=\\\"token keyword\\\">import</span> views <span class=\\\"token keyword\\\">as</span> core_views\\n\\nrouter <span class=\\\"token operator\\\">=</span> routers<span class=\\\"token punctuation\\\">.</span>DefaultRouter<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nrouter<span class=\\\"token punctuation\\\">.</span>register<span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token string\\\">'wallets'</span><span class=\\\"token punctuation\\\">,</span> core_views<span class=\\\"token punctuation\\\">.</span>WalletViewSet<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\"># Wire up our API using automatic URL routing.</span>\\n<span class=\\\"token comment\\\"># Additionally, we include login URLs for the browsable API.</span>\\nurlpatterns <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    url<span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token string\\\">'^'</span><span class=\\\"token punctuation\\\">,</span> include<span class=\\\"token punctuation\\\">(</span>router<span class=\\\"token punctuation\\\">.</span>urls<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    url<span class=\\\"token punctuation\\\">(</span>r<span class=\\\"token string\\\">'^api-auth/'</span><span class=\\\"token punctuation\\\">,</span> include<span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'rest_framework.urls'</span><span class=\\\"token punctuation\\\">,</span> namespace<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'rest_framework'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<p>In <code class=\\\"language-text\\\">django-meets-blockchain/dmbapi/settings.py</code>, add entries for <code class=\\\"language-text\\\">rest_framework</code> and <code class=\\\"language-text\\\">core</code> to <code class=\\\"language-text\\\">INSTALLED_APPS</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-json\\\"><code class=\\\"language-json\\\">INSTALLED_APPS = <span class=\\\"token punctuation\\\">[</span>\\n    'django.contrib.admin'<span class=\\\"token punctuation\\\">,</span>\\n    'django.contrib.auth'<span class=\\\"token punctuation\\\">,</span>\\n    'django.contrib.contenttypes'<span class=\\\"token punctuation\\\">,</span>\\n    'django.contrib.sessions'<span class=\\\"token punctuation\\\">,</span>\\n    'django.contrib.messages'<span class=\\\"token punctuation\\\">,</span>\\n    'django.contrib.staticfiles'<span class=\\\"token punctuation\\\">,</span>\\n    'rest_framework'<span class=\\\"token punctuation\\\">,</span>\\n    'core'\\n<span class=\\\"token punctuation\\\">]</span></code></pre>\\n      </div>\\n<h4 id=\\\"run-the-server\\\"><a href=\\\"#run-the-server\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Run the Server</h4>\\n<p>Test the app now by running the server (note this command should be executed <em>inside</em> the VM):</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">python manage.py runserver 0.0.0.0:8000</code></pre>\\n      </div>\\n<p>Now you should be able to access the new endpoint at <a href=\\\"http://localhost:8000/wallets/\\\">http://localhost:8000/wallets/</a></p>\\n<p>Try adding a new wallet using the form, then reload the endpoint to make sure it was added. You can verify the data is correct by looking at the JSON output as well: <a href=\\\"http://localhost:8000/wallets/?format=json\\\">http://localhost:8000/wallets/?format=json</a></p>\",\"tableOfContents\":\"<ul>\\n<li><a href=\\\"/django-meets-blockchain-site/part-1/instructions/#objectives\\\">Objectives</a></li>\\n<li><a href=\\\"/django-meets-blockchain-site/part-1/instructions/#setup\\\">Setup</a></li>\\n<li><a href=\\\"/django-meets-blockchain-site/part-1/instructions/#scaffolding\\\">Scaffolding</a></li>\\n<li>\\n<p><a href=\\\"/django-meets-blockchain-site/part-1/instructions/#adding-an-endpoint\\\">Adding an Endpoint</a></p>\\n<ul>\\n<li><a href=\\\"/django-meets-blockchain-site/part-1/instructions/#model\\\">Model</a></li>\\n<li><a href=\\\"/django-meets-blockchain-site/part-1/instructions/#serializer\\\">Serializer</a></li>\\n<li><a href=\\\"/django-meets-blockchain-site/part-1/instructions/#viewset\\\">ViewSet</a></li>\\n<li><a href=\\\"/django-meets-blockchain-site/part-1/instructions/#wiring\\\">Wiring</a></li>\\n<li><a href=\\\"/django-meets-blockchain-site/part-1/instructions/#run-the-server\\\">Run the Server</a></li>\\n</ul>\\n</li>\\n</ul>\",\"excerpt\":\"Objectives Provision and setup a new project using Django Rest Framework (DRF) Add a   endpoint to support persisting wallet data by adding…\",\"frontmatter\":{\"id\":\"drf-instructions\",\"title\":\"Instructions\",\"prev\":\"drf-overview\",\"next\":null}}},\"pathContext\":{\"slug\":\"/part-1/instructions/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/part-1-instructions.json\n// module id = 312\n// module chunks = 168392498811549"],"sourceRoot":""}